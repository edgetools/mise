#!/usr/bin/env pwsh

# environment
# ======================================================================================================================

# Set-PSDebug -Trace 2

Set-Variable -Option Constant -Name INSTALL_PATH -Value '/usr/local/bin/mise'
Set-Variable -Option Constant -Name SOURCE_BIN_PATH -Value "${PWD}/bin/mise"

# functions
# ======================================================================================================================
function script:Get-ScriptFiles {
  $scriptFiles = [System.Collections.Generic.List[System.Object]]::new()
  # get .ps1 scripts but ignore test files
  $scriptFiles.AddRange(@(Get-ChildItem -LiteralPath $PWD -Recurse -File -Filter '*.ps1' -Exclude '*.tests.ps1'))
  # get .psm1 module files
  $scriptFiles.AddRange(@(Get-ChildItem -LiteralPath $PWD -Recurse -File -Filter '*.psm1'))
  return $scriptFiles
}

function script:Invoke-MakeTarget {
  switch ($args[0]) {
    # test
    'test' {
      script:Invoke-MakeTargets 'unit' 'systest'
      # Invoke-Pester -CodeCoverage (script:Get-ScriptFiles)
    }
    # unit tests
    'unit' {
      Invoke-Pester -CodeCoverage (script:Get-ScriptFiles) -Tag 'unit'
    }
    # system tests
    'systest' {
      Invoke-Pester -Tag 'system'
    }
    # install
    'install' {
      [bool]$shouldDeleteExisting = $false
      [bool]$shouldCreateNew = $false
      # check for existing file
      if (Test-Path -LiteralPath $INSTALL_PATH -PathType Leaf) {
        # check if file is a symlink
        $existingFile = Get-Item -LiteralPath $INSTALL_PATH
        if (($existingFile.LinkType -cne 'SymbolicLink') `
            -or ($existingFile.Target -cne $SOURCE_BIN_PATH)) {
          # if not a symlink, or if symlink not pointing to the correct path
          # delete and recreate
          $shouldDeleteExisting = $true
          $shouldCreateNew = $true
        }
      } else {
        $shouldCreateNew = $true
      }
      # remove if needed
      if ($shouldDeleteExisting -eq $true) {
        Remove-Item -LiteralPath $INSTALL_PATH -ErrorAction Stop
      }
      # create symlink
      if ($shouldCreateNew -eq $true) {
        New-Item -Path $INSTALL_PATH -ItemType SymbolicLink -Value $SOURCE_BIN_PATH -ErrorAction Stop
      }
    }
    # uninstall
    'uninstall' {
      Remove-Item -LiteralPath $INSTALL_PATH
    }
  }
}

function script:Invoke-MakeTargets {
  foreach ($target in $args) {
    script:Invoke-MakeTarget $target
  }
}

# main
# ======================================================================================================================

# make targets dispatch
if ($args.Count -eq 0) {
  script:Invoke-MakeTargets $DEFAULT_TARGETS
} else {
  script:Invoke-MakeTargets $args
}
